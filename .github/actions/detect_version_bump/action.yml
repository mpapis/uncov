name: 'Detect version bump'
description: 'Detect version bump based on changelog headers'
inputs:
  changelog:
    description: 'The changelog to parse'
    required: true
  pattern:
    description: 'The regexp pattern to match the changelog for detecting version bump header'
    required: true
    default: '^### (Major|Minor|Patch)$'
  mapping:
    description: 'Mapping of found header to version bump'
    required: true
    default: |
      {
        "Major": "major",
        "Minor": "minor",
        "Patch": "patch"
      }
outputs:
  found:
    description: "Indicate if a version bump was found in the changelog"
    value: ${{ !!steps.match.outputs.result }}
  value:
    description: "The detected version bump"
    value: ${{ steps.match.outputs.result }}
runs:
  using: "composite"
  steps:
    - name: Match changelog against the pattern and pick mapping
      id: match
      uses: actions/github-script@v7
      with:
        changelog: ${{ inputs.changelog }}
        script: |
          try {
            core.debug('Starting script execution...');
            const executeScript = new Function(`
              try {
                const changelog = core.getInput('changelog');
                const regexPattern = /${{ inputs.pattern }}/m;
                const mapping = JSON.parse('${{ inputs.mapping }}');
                const match = changelog.match(regexPattern);
  
                if (match) {
                  const header = match[1]; // Get group 1
                  const result = mapping[header]; // Use mapping to get the corresponding value
                  return result; // Return the result
                } else {
                  return null; // Return null if no match
                }
              } catch (error) {
                const stack = error.stack.split('\n');
                const lineMatch = stack[1].match(/<anonymous>:(\d+):(\d+)/);
  
                if (lineMatch) {
                  const lineNumber = parseInt(lineMatch[1]);
                  const columnNumber = parseInt(lineMatch[2]);
  
                  throw new Error(
                    \`SyntaxError at line \${lineNumber}, column \${columnNumber}\\n\\nError: \${error.message}\\n\\nStack trace:\\n\${stack.join('\\n')}\`
                  );
                }
                throw error;
              }
            `);

            await executeScript();
          } catch (error) {
            core.setFailed(`Script execution failed:\n${error.message}`);
          }
